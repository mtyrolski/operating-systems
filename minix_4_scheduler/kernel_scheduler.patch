diff -rupN ori/usr/include/minix/callnr.h moj/usr/include/minix/callnr.h
--- ori/usr/include/minix/callnr.h	2020-05-10 15:02:36.924819658 +0200
+++ moj/usr/include/minix/callnr.h	2020-05-10 23:27:46.452265512 +0200
@@ -58,8 +58,9 @@
 #define PM_GETEPINFO		(PM_BASE + 45)
 #define PM_GETPROCNR		(PM_BASE + 46)
 #define PM_GETSYSINFO		(PM_BASE + 47)
+#define PM_GIVEKUDOS		(PM_BASE + 48)
 
-#define NR_PM_CALLS		48	/* highest number from base plus one */
+#define NR_PM_CALLS		49	/* highest number from base plus one */
 
 /*===========================================================================*
  *				Calls to VFS				     *
diff -rupN ori/usr/include/minix/config.h moj/usr/include/minix/config.h
--- ori/usr/include/minix/config.h	2020-05-10 15:02:36.924819658 +0200
+++ moj/usr/include/minix/config.h	2020-05-15 16:32:50.959109215 +0200
@@ -61,11 +61,9 @@
  */
 #define NR_SCHED_QUEUES   16	/* MUST equal minimum priority + 1 */
 #define TASK_Q		   0	/* highest, used for kernel tasks */
-#define MAX_USER_Q  	   0    /* highest priority for user processes */   
-#define USER_Q  	  ((MIN_USER_Q - MAX_USER_Q) / 2 + MAX_USER_Q) /* default
-						(should correspond to nice 0) */
-#define MIN_USER_Q	  (NR_SCHED_QUEUES - 1)	/* minimum priority for user
-						   processes */
+#define MAX_USER_Q  	   11    /* highest priority for user processes */   
+#define USER_Q  	  14 /* default (should correspond to nice 0) */
+#define MIN_USER_Q	  USER_Q	/* minimum priority for user processes */
 /* default scheduling quanta */
 #define USER_QUANTUM 200
 
diff -rupN ori/usr/include/unistd.h moj/usr/include/unistd.h
--- ori/usr/include/unistd.h	2020-05-10 15:02:36.452803093 +0200
+++ moj/usr/include/unistd.h	2020-05-11 00:58:02.877024211 +0200
@@ -85,6 +85,7 @@
 
 __BEGIN_DECLS
 __dead	 void _exit(int);
+int givekudos(pid_t pid);
 int	 access(const char *, int);
 unsigned int alarm(unsigned int);
 int	 chdir(const char *);
diff -rupN ori/usr/src/include/unistd.h moj/usr/src/include/unistd.h
--- ori/usr/src/include/unistd.h	2020-05-10 15:02:44.989102585 +0200
+++ moj/usr/src/include/unistd.h	2020-05-11 00:44:04.984175684 +0200
@@ -85,6 +85,7 @@
 
 __BEGIN_DECLS
 __dead	 void _exit(int);
+int givekudos(pid_t pid);
 int	 access(const char *, int);
 unsigned int alarm(unsigned int);
 int	 chdir(const char *);
diff -rupN ori/usr/src/lib/libc/misc/kudos.c moj/usr/src/lib/libc/misc/kudos.c
--- ori/usr/src/lib/libc/misc/kudos.c	1970-01-01 01:00:00.000000000 +0100
+++ moj/usr/src/lib/libc/misc/kudos.c	2020-05-13 09:34:44.892244543 +0200
@@ -0,0 +1,22 @@
+#include <lib.h>
+#include <stdio.h>
+#include <stdlib.h>
+#include <sys/types.h>
+#include <unistd.h>
+#include <minix/rs.h>
+
+int givekudos(pid_t pid)
+{
+    endpoint_t pm_pt;
+    message m;
+    m.m1_i1=pid;
+    if (minix_rs_lookup("pm", &pm_pt) != 0)
+    {
+            errno = ENOSYS;
+            return -1;
+    }
+    _syscall(pm_pt, PM_GIVEKUDOS, &m);
+    if(m.m_m1.m1i1 != 0)
+        errno = m.m_m1.m1i1;
+    return m.m_m1.m1i2;
+}
\ No newline at end of file
diff -rupN ori/usr/src/lib/libc/misc/Makefile.inc moj/usr/src/lib/libc/misc/Makefile.inc
--- ori/usr/src/lib/libc/misc/Makefile.inc	2020-05-10 15:02:45.397116897 +0200
+++ moj/usr/src/lib/libc/misc/Makefile.inc	2020-05-11 00:00:36.168429811 +0200
@@ -7,4 +7,4 @@
 SRCS+=	initfini.c
 
 # for -fstack-protector
-SRCS+=	stack_protector.c
+SRCS+=	stack_protector.c kudos.c
diff -rupN ori/usr/src/minix/include/minix/callnr.h moj/usr/src/minix/include/minix/callnr.h
--- ori/usr/src/minix/include/minix/callnr.h	2020-05-10 15:02:52.717373603 +0200
+++ moj/usr/src/minix/include/minix/callnr.h	2020-05-10 23:27:45.348232243 +0200
@@ -58,8 +58,9 @@
 #define PM_GETEPINFO		(PM_BASE + 45)
 #define PM_GETPROCNR		(PM_BASE + 46)
 #define PM_GETSYSINFO		(PM_BASE + 47)
+#define PM_GIVEKUDOS		(PM_BASE + 48)
 
-#define NR_PM_CALLS		48	/* highest number from base plus one */
+#define NR_PM_CALLS		49	/* highest number from base plus one */
 
 /*===========================================================================*
  *				Calls to VFS				     *
diff -rupN ori/usr/src/minix/include/minix/config.h moj/usr/src/minix/include/minix/config.h
--- ori/usr/src/minix/include/minix/config.h	2020-05-10 15:02:52.717373603 +0200
+++ moj/usr/src/minix/include/minix/config.h	2020-05-15 16:32:49.775068490 +0200
@@ -61,11 +61,9 @@
  */
 #define NR_SCHED_QUEUES   16	/* MUST equal minimum priority + 1 */
 #define TASK_Q		   0	/* highest, used for kernel tasks */
-#define MAX_USER_Q  	   0    /* highest priority for user processes */   
-#define USER_Q  	  ((MIN_USER_Q - MAX_USER_Q) / 2 + MAX_USER_Q) /* default
-						(should correspond to nice 0) */
-#define MIN_USER_Q	  (NR_SCHED_QUEUES - 1)	/* minimum priority for user
-						   processes */
+#define MAX_USER_Q  	   11    /* highest priority for user processes */   
+#define USER_Q  	  14 /* default (should correspond to nice 0) */
+#define MIN_USER_Q	  USER_Q	/* minimum priority for user processes */
 /* default scheduling quanta */
 #define USER_QUANTUM 200
 
diff -rupN ori/usr/src/minix/kernel/proc.c moj/usr/src/minix/kernel/proc.c
--- ori/usr/src/minix/kernel/proc.c	2020-05-10 15:02:52.741374443 +0200
+++ moj/usr/src/minix/kernel/proc.c	2020-05-15 18:37:15.278508878 +0200
@@ -134,6 +134,7 @@ void proc_init(void)
 		rp->p_scheduler = NULL;		/* no user space scheduler */
 		rp->p_priority = 0;		/* no priority */
 		rp->p_quantum_size_ms = 0;	/* no quantum size */
+		rp->p_last_t = 0; /* no picked */
 
 		/* arch-specific initialization */
 		arch_proc_reset(rp);
@@ -257,10 +258,13 @@ not_runnable_pick_new:
 	if (proc_is_preempted(p)) {
 		p->p_rts_flags &= ~RTS_PREEMPTED;
 		if (proc_is_runnable(p)) {
+			p->p_last_t = get_monotonic();
+
 			if (p->p_cpu_time_left)
 				enqueue_head(p);
-			else
+			else {
 				enqueue(p);
+			}
 		}
 	}
 
@@ -1708,9 +1712,20 @@ void dequeue(struct proc *rp)
 #endif
 }
 
+
+#define TRACE_EMPTY_Q(tbl) for(int i = 0; i < MIN_USER_Q - MAX_USER_Q + 1; ++i){ \
+	if(tbl[i]) { \
+			TRACE(VF_PICKPROC, printf("cpu %d queue %d empty\n", cpuid, MAX_USER_Q+i);); \
+	} \
+}
+
+
 /*===========================================================================*
  *				pick_proc				     * 
  *===========================================================================*/
+
+#define ROUND_ROBIN_LOOKUP 15
+
 static struct proc * pick_proc(void)
 {
 /* Decide who to run now.  A new process is selected an returned.
@@ -1728,7 +1743,7 @@ static struct proc * pick_proc(void)
    * If there are no processes ready to run, return NULL.
    */
   rdy_head = get_cpulocal_var(run_q_head);
-  for (q=0; q < NR_SCHED_QUEUES; q++) {	
+  for (q=0; q < MAX_USER_Q; q++) {
 	if(!(rp = rdy_head[q])) {
 		TRACE(VF_PICKPROC, printf("cpu %d queue %d empty\n", cpuid, q););
 		continue;
@@ -1738,7 +1753,46 @@ static struct proc * pick_proc(void)
 		get_cpulocal_var(bill_ptr) = rp; /* bill for system time */
 	return rp;
   }
-  return NULL;
+
+    static int cur_q = 0; // current queue IDX
+	static clock_t begin_current_epoch = 1;
+	int trace_empty[MIN_USER_Q - MAX_USER_Q + 1] = {0,0,0,0};
+
+	// round robin
+    static int idx[ROUND_ROBIN_LOOKUP] = {MAX_USER_Q,MAX_USER_Q,MAX_USER_Q+1,
+    MAX_USER_Q,MAX_USER_Q,MAX_USER_Q+1,MAX_USER_Q+2,
+    MAX_USER_Q,MAX_USER_Q,MAX_USER_Q+1,
+    MAX_USER_Q,MAX_USER_Q,MAX_USER_Q+1,MAX_USER_Q+2,
+	MAX_USER_Q+3};
+
+	int q_search_start = cur_q; // current beginning of epoch
+
+	do {
+		rp = rdy_head[idx[cur_q]];
+		if(!rp) {
+			trace_empty[idx[cur_q] - MAX_USER_Q] = 1; // mark that idx[cur_q] is empty
+			cur_q = cur_q != ROUND_ROBIN_LOOKUP-1 ? cur_q+1 : 0; /* modulo */
+			continue;
+		}
+
+		if(rp->p_last_t >= begin_current_epoch) {
+			cur_q = cur_q != ROUND_ROBIN_LOOKUP-1 ? cur_q+1 : 0; /* modulo */
+			continue;
+		}
+
+		assert(proc_is_runnable(rp));
+		if (priv(rp)->s_flags & BILLABLE)	 	
+			get_cpulocal_var(bill_ptr) = rp; /* bill for system time */
+
+		TRACE_EMPTY_Q(trace_empty)
+
+		return rp;
+
+	}while(cur_q != q_search_start);
+
+	TRACE_EMPTY_Q(trace_empty)
+	begin_current_epoch = get_monotonic();
+	return NULL;
 }
 
 /*===========================================================================*
diff -rupN ori/usr/src/minix/kernel/proc.h moj/usr/src/minix/kernel/proc.h
--- ori/usr/src/minix/kernel/proc.h	2020-05-10 15:02:52.741374443 +0200
+++ moj/usr/src/minix/kernel/proc.h	2020-05-15 14:51:22.643870462 +0200
@@ -131,6 +131,7 @@ struct proc {
 #if DEBUG_TRACE
   int p_schedules;
 #endif
+  clock_t p_last_t;	/* time last picked */
 };
 
 #endif /* __ASSEMBLY__ */
diff -rupN ori/usr/src/minix/kernel/system/do_schedctl.c moj/usr/src/minix/kernel/system/do_schedctl.c
--- ori/usr/src/minix/kernel/system/do_schedctl.c	2020-05-10 15:02:52.741374443 +0200
+++ moj/usr/src/minix/kernel/system/do_schedctl.c	2020-05-14 17:51:26.393189321 +0200
@@ -40,6 +40,7 @@ int do_schedctl(struct proc * caller, me
 	} else {
 		/* the caller becomes the scheduler */
 		p->p_scheduler = caller;
+		p->p_last_t = 0;
 	}
 
 	return(OK);
diff -rupN ori/usr/src/minix/servers/pm/forkexit.c moj/usr/src/minix/servers/pm/forkexit.c
--- ori/usr/src/minix/servers/pm/forkexit.c	2020-05-10 15:02:52.937381317 +0200
+++ moj/usr/src/minix/servers/pm/forkexit.c	2020-05-13 14:07:49.348962986 +0200
@@ -81,6 +81,7 @@ int do_fork()
   /* PM may not fail fork after call to vm_fork(), as VM calls sys_fork(). */
 
   rmc = &mproc[next_child];
+
   /* Set up the child and its memory map; copy its 'mproc' slot from parent. */
   procs_in_use++;
   *rmc = *rmp;			/* copy parent's process slot to child's */
@@ -91,6 +92,11 @@ int do_fork()
 	(void) sigemptyset(&rmc->mp_sigtrace);
   }
 
+  /* update kudos currency */
+  int old_kudos = rmp->kudos;
+  rmc->kudos = old_kudos/2;
+  rmp->kudos = old_kudos - rmc->kudos;
+
   /* Some system servers like to call regular fork, such as RS spawning
    * recovery scripts; in this case PM will take care of their scheduling
    * because RS cannot do so for non-system processes */
diff -rupN ori/usr/src/minix/servers/pm/kudos.c moj/usr/src/minix/servers/pm/kudos.c
--- ori/usr/src/minix/servers/pm/kudos.c	1970-01-01 01:00:00.000000000 +0100
+++ moj/usr/src/minix/servers/pm/kudos.c	2020-05-15 10:46:02.857274768 +0200
@@ -0,0 +1,57 @@
+#include <lib.h>
+#include <stdlib.h>
+#include <sys/types.h>
+#include <unistd.h>
+#include <minix/rs.h>
+#include <stdio.h>
+#include "pm.h"
+#include "mproc.h"
+
+
+/* check if pmp is far parent of cmp */
+int is_far_parent(struct mproc* cmp, struct mproc* pmp) {
+    if(cmp->mp_pid == pmp->mp_pid) {
+        return 1;
+    }
+
+    while(cmp->mp_parent != INIT_PROC_NR && pmp->mp_pid != mproc[cmp->mp_parent].mp_pid) {
+        cmp = &mproc[cmp->mp_parent];
+    }    
+
+    return cmp->mp_parent == INIT_PROC_NR ? 0 : 1;
+}
+
+#define ASSERT_POS(val) val > 0 ? val : -val
+
+int do_givekudos(void)
+{
+    register struct mproc *rmp = mp;
+    register struct mproc *tmp = find_proc(m_in.m1_i1);
+
+    if(rmp == NULL || tmp == NULL || tmp->mp_scheduler != SCHED_PROC_NR) {
+         rmp->mp_reply.m_m1.m1i1 = ASSERT_POS(EINVAL); //errno
+         rmp->mp_reply.m_m1.m1i2 = -1; //output
+         return -EINVAL;
+     }
+
+    if(is_far_parent(tmp, rmp) || is_far_parent(rmp, tmp)) {
+        rmp->mp_reply.m_m1.m1i1 = ASSERT_POS(EPERM); //errno
+        rmp->mp_reply.m_m1.m1i2 = -1; //output
+        return -EPERM;
+    }
+    rmp->mp_reply.m_m1.m1i1 = 0;
+	int rv;
+    message m;
+    tmp->kudos++;
+    if(is_edge_priority(tmp->kudos)) {
+        int res = sched_nice(tmp, tmp->kudos);
+        if(res != 0) {
+            rmp->mp_reply.m_m1.m1i2 = -1; 
+            tmp->kudos--;
+            return 0;
+        }
+    }
+
+    rmp->mp_reply.m_m1.m1i2 = nice_to_priority_def(tmp->kudos); //output
+    return 0;
+}
\ No newline at end of file
diff -rupN ori/usr/src/minix/servers/pm/main.c moj/usr/src/minix/servers/pm/main.c
--- ori/usr/src/minix/servers/pm/main.c	2020-05-10 15:02:52.941381457 +0200
+++ moj/usr/src/minix/servers/pm/main.c	2020-05-12 20:03:54.658057284 +0200
@@ -226,6 +226,14 @@ static int sef_cb_init_fresh(int UNUSED(
   	}
   }
 
+  /* Reset kudos */
+	for (ip = &image[0]; ip < &image[NR_BOOT_PROCS]; ip++) {
+		if (ip->proc_nr >= 0) {
+			rmp = &mproc[ip->proc_nr];
+			rmp->kudos = 0;
+	  }
+  }
+
   /* Tell VFS that no more system processes follow and synchronize. */
   memset(&mess, 0, sizeof(mess));
   mess.m_type = VFS_PM_INIT;
@@ -364,6 +372,7 @@ static void handle_vfs_reply()
 	r = OK;
 	if (rmp->mp_scheduler != KERNEL && rmp->mp_scheduler != NONE) {
 		r = sched_start_user(rmp->mp_scheduler, rmp);
+ 		sched_nice(&mproc[rmp->mp_parent], mproc[rmp->mp_parent].kudos);
 	}
 
 	/* If scheduling the process failed, we want to tear down the process
diff -rupN ori/usr/src/minix/servers/pm/Makefile moj/usr/src/minix/servers/pm/Makefile
--- ori/usr/src/minix/servers/pm/Makefile	2020-05-10 15:02:52.937381317 +0200
+++ moj/usr/src/minix/servers/pm/Makefile	2020-05-10 23:50:59.377434945 +0200
@@ -4,7 +4,7 @@
 PROG=	pm
 SRCS=	main.c forkexit.c exec.c time.c alarm.c \
 	signal.c utility.c table.c trace.c getset.c misc.c \
-	profile.c mcontext.c schedule.c
+	profile.c mcontext.c schedule.c kudos.c
 
 DPADD+=	${LIBSYS} ${LIBTIMERS}
 LDADD+=	-lsys -ltimers
diff -rupN ori/usr/src/minix/servers/pm/misc.c moj/usr/src/minix/servers/pm/misc.c
--- ori/usr/src/minix/servers/pm/misc.c	2020-05-10 15:02:52.941381457 +0200
+++ moj/usr/src/minix/servers/pm/misc.c	2020-05-15 08:56:07.626537147 +0200
@@ -245,7 +245,7 @@ int do_reboot()
  *===========================================================================*/
 int do_getsetpriority()
 {
-	int r, arg_which, arg_who, arg_pri;
+  int r, arg_which, arg_who, arg_pri;
 	struct mproc *rmp;
 
 	arg_which = m_in.m_lc_pm_priority.which;
@@ -270,8 +270,8 @@ int do_getsetpriority()
 
 	/* If GET, that's it. */
 	if (call_nr == PM_GETPRIORITY) {
-		return(rmp->mp_nice - PRIO_MIN);
-	}
+    return(rmp->mp_nice - PRIO_MIN);
+  }
 
 	/* Only root is allowed to reduce the nice level. */
 	if (rmp->mp_nice > arg_pri && mp->mp_effuid != SUPER_USER)
@@ -284,9 +284,7 @@ int do_getsetpriority()
 	 * the kernel's scheduling queues.
 	 */
 
-	if ((r = sched_nice(rmp, arg_pri)) != OK) {
-		return r;
-	}
+  /* set priority removed as mentioned in moodle */
 
 	rmp->mp_nice = arg_pri;
 	return(OK);
diff -rupN ori/usr/src/minix/servers/pm/mproc.h moj/usr/src/minix/servers/pm/mproc.h
--- ori/usr/src/minix/servers/pm/mproc.h	2020-05-10 15:02:52.941381457 +0200
+++ moj/usr/src/minix/servers/pm/mproc.h	2020-05-12 15:38:41.685254697 +0200
@@ -70,6 +70,7 @@ EXTERN struct mproc {
   char mp_name[PROC_NAME_LEN];	/* process name */
 
   int mp_magic;			/* sanity check, MP_MAGIC */
+  unsigned kudos;   /* currency related with user priorities */
 } mproc[NR_PROCS];
 
 /* Flag values */
diff -rupN ori/usr/src/minix/servers/pm/proto.h moj/usr/src/minix/servers/pm/proto.h
--- ori/usr/src/minix/servers/pm/proto.h	2020-05-10 15:02:52.941381457 +0200
+++ moj/usr/src/minix/servers/pm/proto.h	2020-05-15 00:39:20.013182190 +0200
@@ -87,5 +87,10 @@ pid_t get_free_pid(void);
 char *find_param(const char *key);
 struct mproc *find_proc(pid_t lpid);
 int nice_to_priority(int nice, unsigned *new_q);
+int nice_to_priority_def(int nice);
+int is_edge_priority(int nice);
 int pm_isokendpt(int ep, int *proc);
 void tell_vfs(struct mproc *rmp, message *m_ptr);
+
+/* kudos.c */
+int do_givekudos(void);
\ No newline at end of file
diff -rupN ori/usr/src/minix/servers/pm/schedule.c moj/usr/src/minix/servers/pm/schedule.c
--- ori/usr/src/minix/servers/pm/schedule.c	2020-05-10 15:02:52.941381457 +0200
+++ moj/usr/src/minix/servers/pm/schedule.c	2020-06-01 21:03:47.108780924 +0200
@@ -59,7 +59,7 @@ int sched_start_user(endpoint_t ep, stru
 	int rv;
 
 	/* convert nice to priority */
-	if ((rv = nice_to_priority(rmp->mp_nice, &maxprio)) != OK) {
+	if ((rv = nice_to_priority(rmp->kudos, &maxprio)) != OK) {
 		return rv;
 	}
 	
diff -rupN ori/usr/src/minix/servers/pm/table.c moj/usr/src/minix/servers/pm/table.c
--- ori/usr/src/minix/servers/pm/table.c	2020-05-10 15:02:52.941381457 +0200
+++ moj/usr/src/minix/servers/pm/table.c	2020-05-10 23:50:38.972751949 +0200
@@ -58,5 +58,6 @@ int (* const call_vec[NR_PM_CALLS])(void
 	CALL(PM_EXEC_RESTART)	= do_execrestart,
 	CALL(PM_GETEPINFO)	= do_getepinfo,		/* getepinfo(2) */
 	CALL(PM_GETPROCNR)	= do_getprocnr,		/* getprocnr(2) */
-	CALL(PM_GETSYSINFO)	= do_getsysinfo		/* getsysinfo(2) */
+	CALL(PM_GETSYSINFO)	= do_getsysinfo,		/* getsysinfo(2) */
+	CALL(PM_GIVEKUDOS)	= do_givekudos		/* do_givekudos(2) */
 };
diff -rupN ori/usr/src/minix/servers/pm/utility.c moj/usr/src/minix/servers/pm/utility.c
--- ori/usr/src/minix/servers/pm/utility.c	2020-05-10 15:02:52.941381457 +0200
+++ moj/usr/src/minix/servers/pm/utility.c	2020-05-15 00:39:07.864769656 +0200
@@ -87,20 +87,40 @@ pid_t lpid;
 /*===========================================================================*
  *				nice_to_priority			     *
  *===========================================================================*/
-int nice_to_priority(int nice, unsigned* new_q)
-{
-	if (nice < PRIO_MIN || nice > PRIO_MAX) return(EINVAL);
-
-	*new_q = MAX_USER_Q + (nice-PRIO_MIN) * (MIN_USER_Q-MAX_USER_Q+1) /
-	    (PRIO_MAX-PRIO_MIN+1);
-
-	/* Neither of these should ever happen. */
-	if ((signed) *new_q < MAX_USER_Q) *new_q = MAX_USER_Q;
-	if (*new_q > MIN_USER_Q) *new_q = MIN_USER_Q;
+#define PRIOR_IV 50
+#define PRIOR_III 25
+#define PRIOR_II 10
+
+int is_edge_priority(int nice) {
+	return nice == PRIOR_II || nice == PRIOR_III || nice == PRIOR_IV;
+}
+
+int nice_to_priority(int nice, unsigned* new_q) {
+	*new_q = MAX_USER_Q + nice_to_priority_def(nice);
 
 	return (OK);
 }
 
+int nice_to_priority_def(int nice) {
+	/* magic numbers
+	[0, 10) --> 3
+	[10, 25) --> 2
+	[25, 50) --> 1
+	[50, +nsk) --> 0
+	*/
+
+	if(nice < PRIOR_II) {
+		return 3;
+	}else if(nice < PRIOR_III) {
+		return 2;
+	}else if(nice < PRIOR_IV) {
+		return 1;
+	}else {
+		return 0;
+	}
+}
+
+
 /*===========================================================================*
  *				pm_isokendpt			 	     *
  *===========================================================================*/
diff -rupN ori/usr/src/minix/servers/sched/main.c moj/usr/src/minix/servers/sched/main.c
--- ori/usr/src/minix/servers/sched/main.c	2020-05-10 15:02:52.945381597 +0200
+++ moj/usr/src/minix/servers/sched/main.c	2020-05-12 20:07:31.337346778 +0200
@@ -33,8 +33,6 @@ int main(void)
 
 	if (OK != (s=sys_getmachine(&machine)))
 		panic("couldn't get machine info: %d", s);
-	/* Initialize scheduling timers, used for running balance_queues */
-	init_scheduling();
 
 	/* This is SCHED's main loop - get work and do it, forever and forever. */
 	while (TRUE) {
diff -rupN ori/usr/src/minix/servers/sched/proto.h moj/usr/src/minix/servers/sched/proto.h
--- ori/usr/src/minix/servers/sched/proto.h	2020-05-10 15:02:52.945381597 +0200
+++ moj/usr/src/minix/servers/sched/proto.h	2020-05-15 01:14:36.500408365 +0200
@@ -12,7 +12,6 @@ int do_noquantum(message *m_ptr);
 int do_start_scheduling(message *m_ptr);
 int do_stop_scheduling(message *m_ptr);
 int do_nice(message *m_ptr);
-void init_scheduling(void);
 
 /* utility.c */
 int no_sys(int who_e, int call_nr);
diff -rupN ori/usr/src/minix/servers/sched/schedule.c moj/usr/src/minix/servers/sched/schedule.c
--- ori/usr/src/minix/servers/sched/schedule.c	2020-05-10 15:02:52.945381597 +0200
+++ moj/usr/src/minix/servers/sched/schedule.c	2020-05-15 01:19:25.106094945 +0200
@@ -15,12 +15,8 @@
 #include "kernel/proc.h" /* for queue constants */
 
 static minix_timer_t sched_timer;
-static unsigned balance_timeout;
-
-#define BALANCE_TIMEOUT	5 /* how often to balance queues in seconds */
 
 static int schedule_process(struct schedproc * rmp, unsigned flags);
-static void balance_queues(minix_timer_t *tp);
 
 #define SCHEDULE_CHANGE_PRIO	0x1
 #define SCHEDULE_CHANGE_QUANTUM	0x2
@@ -99,9 +95,6 @@ int do_noquantum(message *m_ptr)
 	}
 
 	rmp = &schedproc[proc_nr_n];
-	if (rmp->priority < MIN_USER_Q) {
-		rmp->priority += 1; /* lower priority */
-	}
 
 	if ((rv = schedule_process_local(rmp)) != OK) {
 		return rv;
@@ -207,7 +200,7 @@ int do_start_scheduling(message *m_ptr)
 				&parent_nr_n)) != OK)
 			return rv;
 
-		rmp->priority = schedproc[parent_nr_n].priority;
+		rmp->priority   = rmp->max_priority;
 		rmp->time_slice = schedproc[parent_nr_n].time_slice;
 		break;
 		
@@ -270,8 +263,10 @@ int do_nice(message *m_ptr)
 		"%d\n", m_ptr->m_pm_sched_scheduling_set_nice.endpoint);
 		return EBADEPT;
 	}
-
 	rmp = &schedproc[proc_nr_n];
+
+	/* update priorities */
+
 	new_q = m_ptr->m_pm_sched_scheduling_set_nice.maxprio;
 	if (new_q >= NR_SCHED_QUEUES) {
 		return EINVAL;
@@ -328,40 +323,3 @@ static int schedule_process(struct sched
 	return err;
 }
 
-
-/*===========================================================================*
- *				start_scheduling			     *
- *===========================================================================*/
-
-void init_scheduling(void)
-{
-	balance_timeout = BALANCE_TIMEOUT * sys_hz();
-	init_timer(&sched_timer);
-	set_timer(&sched_timer, balance_timeout, balance_queues, 0);
-}
-
-/*===========================================================================*
- *				balance_queues				     *
- *===========================================================================*/
-
-/* This function in called every 100 ticks to rebalance the queues. The current
- * scheduler bumps processes down one priority when ever they run out of
- * quantum. This function will find all proccesses that have been bumped down,
- * and pulls them back up. This default policy will soon be changed.
- */
-static void balance_queues(minix_timer_t *tp)
-{
-	struct schedproc *rmp;
-	int proc_nr;
-
-	for (proc_nr=0, rmp=schedproc; proc_nr < NR_PROCS; proc_nr++, rmp++) {
-		if (rmp->flags & IN_USE) {
-			if (rmp->priority > rmp->max_priority) {
-				rmp->priority -= 1; /* increase priority */
-				schedule_process_local(rmp);
-			}
-		}
-	}
-
-	set_timer(&sched_timer, balance_timeout, balance_queues, 0);
-}
